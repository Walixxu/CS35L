################################################################################
Week 3
  Makefiles and C compilation
  Python Scripting
  Patch and Diff
################################################################################

================================================================================
- C	compilation	process	(source	code	->	preprocessor	->	compiler	->	assembler	->	linker)
  The preprocesser handles preprocessor directives, #include, #pragma...
  The compiler takes C source code and creates assembly .s
  gcc -S main.c

  The assembler will create the binary relocatable, written in binary and not
  readable
  gcc -c main.c
  creates main.o

  Linker takes the .o and creates a single executable from it

================================================================================

================================================================================
- Makefiles	(structure	of	rules,	how	does	make	work?)	and	the	build	process (configure,	make,
make	install)
./configure creates the Makefile
Make will make all executables
Make install will move them to where they need to be.

Pass parameters to makefile
make CC=ass

target: dependecies
  Instructions

CC=g++-6
CFLAGS= -O2 -Wall -Wextra
all: exec
exec: main.o printer.o
	$(CC) main.o printer.o -o exec
main.o: main.cpp
	$(CC) -c main.cpp -o main.o
printer.o: printer.cpp printer.h
	$(CC) -c printer.cpp -o printer.o
clean:
	rm *.o
install:
  echo "Status is good"
================================================================================


================================================================================
- Python	scripting (defining	classes,	member	functions,	helper	functions,	variables,	constructs,
indentation,	checking	number	of	arguments,	lists and	list	operations)

list.append(x) Add an item to the end of the list. Equivalent to a[len(a):] = [x].

list.extend(L) Extend the list by appending all the items in the given list.
Equivalent to a[len(a):] = L.

list.insert(i, x) Insert an item at a given position. The first argument is the
index of the element before which to insert, so a.insert(0, x) inserts at the
front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

list.remove(x) Remove the first item from the list whose value is x. It is an
error if there is no such item.

list.pop([i]) Remove the item at the given position in the list, and return it.
If no index is specified, a.pop() removes and returns the last item in the list.
(The square brackets around the i in the method signature denote that the
parameter is optional, not that you should type square brackets at that
position. You will see this notation frequently in the Python Library
Reference.)

list.clear() Remove all items from the list. Equivalent to del a[:].

list.index(x) Return the index in the list of the first item whose value is x.
It is an error if there is no such item.

list.count(x) Return the number of times x appears in the list.

list.sort(key=None, reverse=False) Sort the items of the list in place (the
arguments can be used for sort customization, see sorted() for their
explanation).

list.reverse() Reverse the elements of the list in place.

list.copy() Return a shallow copy of the list. Equivalent to a[:].
================================================================================


================================================================================
- Patch,	diff
o Applying	patches:	unified	diff	format,	pnum	option diff	–u	file1	file2	>
patch_file --- /usr/local/bin/file1	(path	to	original) +++	/usr/local/bin/file2
(path	to	modified) @@	-l,s	+l,s @@	hunk,	l,s	lines	the	change	applies	to	in
from/to	files If	you’re	in	local,	which	num	should	you use?	=>	patch	–pnum	<
patch_file

# This will find the differences between a and b, where b is the 'newer' file
# so when I make a patch, I patch atext so it looks like btext
diff -u atext btext > patch

# You have to save the differences is a file though because diff doesn't
# do that for you.
patch < patch

-pnum  or  --strip=num
  Strip  the smallest prefix containing num leading slashes from each file name found in
  the patch file.  A sequence of one or more adjacent slashes is counted as a
  single slash.  This controls how file names found in the patch file are treated,
  in case you keep your files in a different directory  than  the  person who sent
  out the patch.  For example, supposing the file name in the patch file was

     /u/howard/src/blurfl/blurfl.c

  setting -p0 gives the entire file name unmodified, -p1 gives

     u/howard/src/blurfl/blurfl.c

  without the leading slash, -p4 gives

     blurfl/blurfl.c

  and  not specifying -p at all just gives you blurfl.c.  Whatever you end up
  with is looked for either in the current directory, or the directory specified
  by the -d option.
================================================================================
